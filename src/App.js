import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { TrendingUp, TrendingDown, DollarSign, Calendar, Loader, RefreshCw } from 'lucide-react';
import './styles/App.css';
import './styles/animations.css';

function App() {
    const [currencyData, setCurrencyData] = useState([]);
    const [loading, setLoading] = useState(true);
    const [lastUpdate, setLastUpdate] = useState('');
    const [stats, setStats] = useState({
        maxRate: { value: 0, currency: '', date: '' },
        minRate: { value: 0, currency: '', date: '' },
        averageRate: 0
    });

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¶–ë –†–§
    const fetchCurrencyData = async () => {
        try {
            setLoading(true);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –¥–∞—Ç—É (20.09.2025)
            const response = await fetch('https://www.cbr-xml-daily.ru/daily_json.js');
            const data = await response.json();
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            const currencies = Object.values(data.Valute);
            const currentDate = new Date().toLocaleDateString('ru-RU');
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä—É–±–ª—è
            const rubleRates = currencies.map(currency => currency.Value);
            const maxRate = Math.max(...rubleRates);
            const minRate = Math.min(...rubleRates);
            const averageRate = rubleRates.reduce((a, b) => a + b, 0) / rubleRates.length;
            
            // –ù–∞—Ö–æ–¥–∏–º –≤–∞–ª—é—Ç—ã —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∫—É—Ä—Å–æ–º
            const maxCurrency = currencies.find(currency => currency.Value === maxRate);
            const minCurrency = currencies.find(currency => currency.Value === minRate);
            
            setStats({
                maxRate: { 
                    value: maxRate, 
                    currency: maxCurrency?.Name || '', 
                    charCode: maxCurrency?.CharCode || '',
                    date: currentDate
                },
                minRate: { 
                    value: minRate, 
                    currency: minCurrency?.Name || '', 
                    charCode: minCurrency?.CharCode || '',
                    date: currentDate
                },
                averageRate: averageRate
            });
            
            setCurrencyData(currencies);
            setLastUpdate(new Date().toLocaleTimeString('ru-RU'));
            setLoading(false);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchCurrencyData();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç (–≤–º–µ—Å—Ç–æ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        const interval = setInterval(fetchCurrencyData, 30 * 60 * 1000);
        return () => clearInterval(interval);
    }, []);

    // –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    const containerVariants = {
        hidden: { opacity: 0 },
        visible: {
            opacity: 1,
            transition: {
                staggerChildren: 0.2
            }
        }
    };

    const itemVariants = {
        hidden: { y: 50, opacity: 0 },
        visible: {
            y: 0,
            opacity: 1,
            transition: {
                duration: 0.6,
                ease: "easeOut"
            }
        }
    };

    if (loading) {
        return (
            <div className="app-loading">
                <motion.div
                    initial={{ scale: 0.5, opacity: 0 }}
                    animate={{ scale: 1, opacity: 1 }}
                    transition={{ duration: 0.5 }}
                    className="loading-container"
                >
                    <motion.div
                        animate={{ rotate: 360 }}
                        transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                    >
                        <Loader size={60} color="#667eea" />
                    </motion.div>
                    <motion.h2
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.3 }}
                    >
                        –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...
                    </motion.h2>
                </motion.div>
            </div>
        );
    }

    return (
        <div className="App">
            {/* –•–µ–¥–µ—Ä */}
            <motion.header 
                className="app-header"
                initial={{ opacity: 0, y: -50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
            >
                <div className="header-content">
                    <motion.h1
                        initial={{ scale: 0.5 }}
                        animate={{ scale: 1 }}
                        transition={{ duration: 0.5 }}
                    >
                        üíé –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –¶–ë –†–§
                    </motion.h1>
                    <motion.p
                        initial={{ opacity: 0 }}
                        animate={{ opacity: 1 }}
                        transition={{ delay: 0.5 }}
                    >
                        –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {lastUpdate}
                    </motion.p>
                    <motion.button
                        onClick={fetchCurrencyData}
                        whileHover={{ scale: 1.05 }}
                        whileTap={{ scale: 0.95 }}
                        className="refresh-btn"
                    >
                        <RefreshCw size={18} />
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </motion.button>
                </div>
            </motion.header>

            {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
            <motion.div 
                className="stats-container"
                variants={containerVariants}
                initial="hidden"
                animate="visible"
            >
                {/* –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å */}
                <motion.div className="stat-card max-rate" variants={itemVariants}>
                    <div className="stat-header">
                        <TrendingUp size={32} color="#10b981" />
                        <h3>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å</h3>
                    </div>
                    <div className="stat-value">{stats.maxRate.value.toFixed(2)} ‚ÇΩ</div>
                    <div className="stat-currency">{stats.maxRate.charCode} - {stats.maxRate.currency}</div>
                    <div className="stat-date">
                        <Calendar size={16} />
                        {stats.maxRate.date}
                    </div>
                </motion.div>

                {/* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å */}
                <motion.div className="stat-card min-rate" variants={itemVariants}>
                    <div className="stat-header">
                        <TrendingDown size={32} color="#ef4444" />
                        <h3>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—É—Ä—Å</h3>
                    </div>
                    <div className="stat-value">{stats.minRate.value.toFixed(2)} ‚ÇΩ</div>
                    <div className="stat-currency">{stats.minRate.charCode} - {stats.minRate.currency}</div>
                    <div className="stat-date">
                        <Calendar size={16} />
                        {stats.minRate.date}
                    </div>
                </motion.div>

                {/* –°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å */}
                <motion.div className="stat-card average-rate" variants={itemVariants}>
                    <div className="stat-header">
                        <DollarSign size={32} color="#3b82f6" />
                        <h3>–°—Ä–µ–¥–Ω–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è</h3>
                    </div>
                    <div className="stat-value">{stats.averageRate.toFixed(2)} ‚ÇΩ</div>
                    <div className="stat-description">–ü–æ –≤—Å–µ–º –≤–∞–ª—é—Ç–∞–º</div>
                    <div className="stat-date">
                        <Calendar size={16} />
                        {lastUpdate}
                    </div>
                </motion.div>
            </motion.div>

            {/* –¢–∞–±–ª–∏—Ü–∞ –≤–∞–ª—é—Ç */}
            <motion.div 
                className="currency-table-container"
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.8, duration: 0.6 }}
            >
                <h2>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –¶–ë –†–§</h2>
                <div className="currency-table">
                    <div className="table-header">
                        <span>–í–∞–ª—é—Ç–∞</span>
                        <span>–ö–æ–¥</span>
                        <span>–ö—É—Ä—Å (‚ÇΩ)</span>
                        <span>–ò–∑–º–µ–Ω–µ–Ω–∏–µ</span>
                    </div>
                    <AnimatePresence>
                        {currencyData.map((currency, index) => (
                            <motion.div
                                key={currency.ID}
                                className="table-row"
                                initial={{ opacity: 0, x: -50 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.1 }}
                                whileHover={{ scale: 1.02, backgroundColor: 'rgba(102, 126, 234, 0.1)' }}
                            >
                                <span>{currency.Name}</span>
                                <span className="currency-code">{currency.CharCode}</span>
                                <span className="currency-rate">{currency.Value.toFixed(2)} ‚ÇΩ</span>
                                <span className={currency.Value > currency.Previous ? 'change-up' : 'change-down'}>
                                    {currency.Value > currency.Previous ? '‚Üó' : '‚Üò'} 
                                    {Math.abs(currency.Value - currency.Previous).toFixed(2)}
                                </span>
                            </motion.div>
                        ))}
                    </AnimatePresence>
                </div>
            </motion.div>
        </div>
    );
}

export default App;